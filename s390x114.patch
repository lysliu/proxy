diff --git a/.bazelrc b/.bazelrc
index c6e96403..aaf0799f 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -55,3 +55,5 @@ build --host_linkopt=-pthread
 build --action_env=CXXFLAGS="-Wno-unused-variable -Wno-deprecated-copy -Wbuiltin-assume-aligned-alignmenti -Wno-shorten-64-to-32"
 build:libc++ --action_env=CXXFLAGS=-stdlib="libc++ -Wno-unused-variable -Wno-deprecated-copy -Wbuiltin-assume-aligned-alignmenti -Wno-shorten-64-to-32"
 build:rbe-toolchain-clang-libc++ --action_env=CXXFLAGS="-stdlib=libc++ -Wno-unused-variable -Wno-deprecated-copy -Wbuiltin-assume-aligned-alignmenti -Wno-shorten-64-to-32"
+
+import %workspace%/maistra/bazelrc
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 885a6e34..f732af20 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,3 +18,5 @@ test/envoye2e/http_metadata_exchange/testoutput
 /extensions/common/proxy_expr.h
 /extensions/common/nlohmann_json.hpp
 out/
+*.DS_Store
+maistra/
\ No newline at end of file
diff --git a/Makefile.overrides.mk b/Makefile.overrides.mk
index 4041a4bf..8d43c997 100644
--- a/Makefile.overrides.mk
+++ b/Makefile.overrides.mk
@@ -16,3 +16,5 @@
 BUILD_WITH_CONTAINER ?= 0
 IMAGE_NAME ?= build-tools-proxy
 CGO_ENABLED = 0
+
+include maistra/Makefile
\ No newline at end of file
diff --git a/WORKSPACE b/WORKSPACE
index a226aead..6d225ce3 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -20,7 +20,6 @@ workspace(name = "io_istio_proxy")
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load(
     "//bazel:repositories.bzl",
-    "docker_dependencies",
     "googletest_repositories",
     "istioapi_dependencies",
 )
@@ -29,21 +28,22 @@ googletest_repositories()
 
 istioapi_dependencies()
 
-bind(
-    name = "boringssl_crypto",
-    actual = "//external:ssl",
+new_local_repository(
+    name = "openssl",
+    path = "/usr/lib64/",
+    build_file = "openssl.BUILD"
 )
 
 # 1. Determine SHA256 `wget https://github.com/envoyproxy/envoy/archive/$COMMIT.tar.gz && sha256sum $COMMIT.tar.gz`
 # 2. Update .bazelversion, envoy.bazelrc and .bazelrc if needed.
 #
 # Note: this is needed by release builder to resolve envoy dep sha to tag.
-# Commit date: 2022-08-12
-ENVOY_SHA = "2ba6db6633d24dbe4aa2c5cf8ebba9f84767e3f4"
+# Commit date: 2022-04-07
+ENVOY_SHA = "c8f61e7cc630724cbdf82f5c38650090f00cbb5e"
 
-ENVOY_SHA256 = "558cb2faf2e4fb697d691963b81bd8dba78f93d925cac90d42238b3b6c2b452b"
-
-ENVOY_ORG = "envoyproxy"
+ENVOY_SHA256 = "e193a04ac142a09a1686ae5296a2b77854a78c406ec7445eab59a15b25d0de54"
+ 
+ENVOY_ORG = "maistra"
 
 ENVOY_REPO = "envoy"
 
@@ -57,20 +57,19 @@ http_archive(
 )
 
 load("@envoy//bazel:api_binding.bzl", "envoy_api_binding")
-
+envoy_api_binding()
 local_repository(
     name = "envoy_build_config",
     # Relative paths are also supported.
     path = "bazel/extension_config",
 )
 
-envoy_api_binding()
 
-load("@envoy//bazel:api_repositories.bzl", "envoy_api_dependencies")
+load("@envoy//bazel:repositories.bzl", "envoy_dependencies")
 
 envoy_api_dependencies()
 
-load("@envoy//bazel:repositories.bzl", "envoy_dependencies")
+load("@envoy//bazel:repositories.bzl", "envoy_dependencies", "BUILD_ALL_CONTENT")
 
 envoy_dependencies()
 
@@ -101,45 +100,13 @@ load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")
 
 rules_pkg_dependencies()
 
-# Docker dependencies
-
-docker_dependencies()
-
-load(
-    "@io_bazel_rules_docker//repositories:repositories.bzl",
-    container_repositories = "repositories",
-)
-
-container_repositories()
-
-load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")
-
-container_deps()
-
-load(
-    "@io_bazel_rules_docker//container:container.bzl",
-    "container_pull",
-)
-
-container_pull(
-    name = "distroless_cc",
-    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
-    digest = "sha256:86f16733f25964c40dcd34edf14339ddbb2287af2f7c9dfad88f0366723c00d7",
-    registry = "gcr.io",
-    repository = "distroless/cc",
-)
-
-container_pull(
-    name = "bionic",
-    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
-    digest = "sha256:3e83eca7870ee14a03b8026660e71ba761e6919b6982fb920d10254688a363d4",
-    registry = "index.docker.io",
-    repository = "library/ubuntu",
-    tag = "bionic",
-)
-
-# End of docker dependencies
 
 load("//bazel:wasm.bzl", "wasm_dependencies")
 
 wasm_dependencies()
+
+new_local_repository(
+    name = "emscripten_toolchain",
+    path = "/opt/emsdk/",
+    build_file_content = BUILD_ALL_CONTENT,
+)
\ No newline at end of file
diff --git a/bazel/extension_config/extensions_build_config.bzl b/bazel/extension_config/extensions_build_config.bzl
index 011476e0..689ea5e1 100644
--- a/bazel/extension_config/extensions_build_config.bzl
+++ b/bazel/extension_config/extensions_build_config.bzl
@@ -293,9 +293,10 @@ ENVOY_EXTENSIONS = {
     # Quic extensions
     #
 
-    "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
-    "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
-
+    # FIXME: https://issues.redhat.com/browse/OSSM-1209
+    #    "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
+    #    "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
+ 
     #
     # Formatter
     #
@@ -355,7 +356,7 @@ ENVOY_CONTRIB_EXTENSIONS = {
     # Private key providers
     #
 
-    "envoy.tls.key_providers.cryptomb":                         "//contrib/cryptomb/private_key_providers/source:config",
+    #"envoy.tls.key_providers.cryptomb":                         "//contrib/cryptomb/private_key_providers/source:config",
 
     #
     # Socket interface extensions
@@ -374,7 +375,7 @@ ISTIO_ENABLED_CONTRIB_EXTENSIONS = [
     "envoy.filters.network.mysql_proxy",
     "envoy.filters.network.sip_proxy",
     "envoy.filters.sip.router",
-    "envoy.tls.key_providers.cryptomb",
+#    "envoy.tls.key_providers.cryptomb",
 ]
 
 EXTENSIONS = dict([(k,v) for k,v in ENVOY_EXTENSIONS.items() if not k in ISTIO_DISABLED_EXTENSIONS] + 
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index 011de404..6ecf63cf 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -204,11 +204,3 @@ cc_proto_library(
 
 def istioapi_dependencies():
     istioapi_repositories()
-
-def docker_dependencies():
-    http_archive(
-        name = "io_bazel_rules_docker",
-        sha256 = "59d5b42ac315e7eadffa944e86e90c2990110a1c8075f1cd145f487e999d22b3",
-        strip_prefix = "rules_docker-0.17.0",
-        urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.17.0/rules_docker-v0.17.0.tar.gz"],
-    )
diff --git a/common/.commonfiles.sha b/common/.commonfiles.sha
index 1230d3ae..f8251cc0 100644
--- a/common/.commonfiles.sha
+++ b/common/.commonfiles.sha
@@ -1 +1 @@
-7effa8faa541a2e85f3f33bc30ac6df55bccbd37
+231a0a068e39b8a659f4add176b7f587d55b996d
diff --git a/envoy.bazelrc b/envoy.bazelrc
index 5f8123c7..4e059ef0 100644
--- a/envoy.bazelrc
+++ b/envoy.bazelrc
@@ -16,8 +16,6 @@ build --color=yes
 build --workspace_status_command="bash bazel/get_workspace_status"
 build --incompatible_strict_action_env
 build --host_force_python=PY3
-build --java_runtime_version=remotejdk_11
-build --tool_java_runtime_version=remotejdk_11
 build --platform_mappings=bazel/platform_mappings
 
 build --enable_platform_specific_config
@@ -33,8 +31,6 @@ build:linux --cxxopt=-std=c++17
 build:linux --conlyopt=-fexceptions
 build:linux --fission=dbg,opt
 build:linux --features=per_object_debug_info
-build:linux --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
-build:linux --action_env=BAZEL_LINKOPTS=-lm
 
 # We already have absl in the build, define absl=1 to tell googletest to use absl for backtrace.
 build --define absl=1
@@ -57,7 +53,6 @@ build:sanitizer --test_tag_filters=-no_san
 # Common flags for Clang
 build:clang --action_env=BAZEL_COMPILER=clang
 build:clang --action_env=CC=clang --action_env=CXX=clang++
-build:clang --linkopt=-fuse-ld=lld
 
 # Flags for Clang + PCH
 build:clang-pch --spawn_strategy=local
diff --git a/src/envoy/tcp/sni_verifier/sni_verifier.cc b/src/envoy/tcp/sni_verifier/sni_verifier.cc
index d29f0fb2..6053be10 100644
--- a/src/envoy/tcp/sni_verifier/sni_verifier.cc
+++ b/src/envoy/tcp/sni_verifier/sni_verifier.cc
@@ -32,7 +32,7 @@ namespace SniVerifier {
 
 Config::Config(Stats::Scope& scope, size_t max_client_hello_size)
     : stats_{SNI_VERIFIER_STATS(POOL_COUNTER_PREFIX(scope, "sni_verifier."))},
-      ssl_ctx_(SSL_CTX_new(TLS_with_buffers_method())),
++      ssl_ctx_(SSL_CTX_new(TLS_method())),
       max_client_hello_size_(max_client_hello_size) {
   if (max_client_hello_size_ > TLS_MAX_CLIENT_HELLO) {
     throw EnvoyException(fmt::format(
@@ -42,20 +42,28 @@ Config::Config(Stats::Scope& scope, size_t max_client_hello_size)
 
   SSL_CTX_set_options(ssl_ctx_.get(), SSL_OP_NO_TICKET);
   SSL_CTX_set_session_cache_mode(ssl_ctx_.get(), SSL_SESS_CACHE_OFF);
-  SSL_CTX_set_tlsext_servername_callback(
-      ssl_ctx_.get(), [](SSL* ssl, int* out_alert, void*) -> int {
-        Filter* filter = static_cast<Filter*>(SSL_get_app_data(ssl));
+  auto tlsext_servername_cb = +[](SSL* ssl, int* out_alert, void* arg) -> int {
+    Filter* filter = static_cast<Filter*>(SSL_get_app_data(ssl));
+ 
+    if (filter != nullptr) {
+      filter->onServername(absl::NullSafeStringView(
+          SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name)));
+    }
 
-        if (filter != nullptr) {
-          filter->onServername(absl::NullSafeStringView(
-              SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name)));
-        }
+    // TODO (dmitri-d) I don't think we need to set out_alert; it looks like it's only
+    // checked when the callback returns an error, which we don't
+    // *out_alert = SSL_AD_USER_CANCELLED;
+    return 1; //SSL_TLSEXT_ERR_OK
+  };
+
+  SSL_CTX_set_tlsext_servername_callback(ssl_ctx_.get(), tlsext_servername_cb);
 
-        // Return an error to stop the handshake; we have what we wanted
-        // already.
-        *out_alert = SSL_AD_USER_CANCELLED;
-        return SSL_TLSEXT_ERR_ALERT_FATAL;
-      });
+  // During TLS1.3 handshake OpenSSL expects for server-side to have either a valid certificate or
+  // a certificate callback, otherwise the connection is not considered as tls1.3-capable (see
+  // ssl/statem/statem_lib.c:1496 - is_tls13_capable() function in openssl v1.1.1d).
+  // We use a dummy certificate callback to get through  the handshake.
+  auto cert_cb = [](SSL* ssl, void* arg) -> int { return 0; };
+  SSL_CTX_set_cert_cb(ssl_ctx_.get(), cert_cb, nullptr);
 }
 
 bssl::UniquePtr<SSL> Config::newSsl() {
diff --git a/src/envoy/tcp/sni_verifier/sni_verifier.h b/src/envoy/tcp/sni_verifier/sni_verifier.h
index 4f63b5c9..cd32131a 100644
--- a/src/envoy/tcp/sni_verifier/sni_verifier.h
+++ b/src/envoy/tcp/sni_verifier/sni_verifier.h
@@ -17,6 +17,7 @@
 
 #include "envoy/network/filter.h"
 #include "envoy/stats/scope.h"
+#include "bssl_wrapper/bssl_wrapper.h"
 #include "openssl/ssl.h"
 #include "source/common/common/logger.h"
 
diff --git a/src/envoy/tcp/sni_verifier/sni_verifier_test.cc b/src/envoy/tcp/sni_verifier/sni_verifier_test.cc
index 1abaed64..d6555fce 100644
--- a/src/envoy/tcp/sni_verifier/sni_verifier_test.cc
+++ b/src/envoy/tcp/sni_verifier/sni_verifier_test.cc
@@ -22,6 +22,7 @@
 #include "gtest/gtest.h"
 #include "source/common/buffer/buffer_impl.h"
 #include "src/envoy/tcp/sni_verifier/config.h"
+
 #include "test/extensions/filters/listener/tls_inspector/tls_utility.h"
 #include "test/mocks/network/mocks.h"
 #include "test/mocks/server/mocks.h"
@@ -55,8 +56,9 @@ TEST(SniVerifierTest, MaxClientHelloSize) {
 
 class SniVerifierFilterTest : public testing::Test {
  protected:
-  static constexpr size_t TLS_MAX_CLIENT_HELLO = 250;
-
+  // The value of TLS_MAX_CLIENT_HELLO should be greater than the maximum size of clienthello in all tests
+  // (with the exception of SniTooLarge) for all tls versions
+  static constexpr size_t TLS_MAX_CLIENT_HELLO = 372;
   void SetUp() override {
     store_ = std::make_unique<Stats::IsolatedStoreImpl>();
     cfg_ = std::make_shared<Config>(*store_, TLS_MAX_CLIENT_HELLO);
@@ -175,7 +177,8 @@ TEST_F(SniVerifierFilterTest, BothSnisEmpty) {
 }
 
 TEST_F(SniVerifierFilterTest, SniTooLarge) {
-  runTestForClientHello("example.com", std::string(TLS_MAX_CLIENT_HELLO, 'a'),
+  // Inner sni hostname length is such that the total length of clienthello exceeds the TLS_MAX_CLIENT_HELLO bytes
+  runTestForClientHello("example.com", std::string(252, 'a'),
                         Network::FilterStatus::StopIteration);
   EXPECT_EQ(1, cfg_->stats().client_hello_too_large_.value());
   EXPECT_EQ(0, cfg_->stats().tls_found_.value());
diff --git a/test/envoye2e/stats_plugin/stats_test.go b/test/envoye2e/stats_plugin/stats_test.go
index a4b215e5..c7145f48 100644
--- a/test/envoye2e/stats_plugin/stats_test.go
+++ b/test/envoye2e/stats_plugin/stats_test.go
@@ -59,11 +59,13 @@ var Runtimes = []struct {
 		StatsFilterCode:            "filename: " + filepath.Join(env.GetBazelBinOrDie(), "extensions/stats.wasm"),
 		WasmRuntime:                "envoy.wasm.runtime.v8",
 	},
-	{
-		MetadataExchangeFilterCode: "filename: " + filepath.Join(env.GetBazelBinOrDie(), "extensions/metadata_exchange.compiled.wasm"),
-		StatsFilterCode:            "filename: " + filepath.Join(env.GetBazelBinOrDie(), "extensions/stats.compiled.wasm"),
-		WasmRuntime:                "envoy.wasm.runtime.v8",
-	},
+	// https://issues.redhat.com/browse/MAISTRA-2140
+	// FIXME: Reenable when the issue above is fixed
+	// {
+	// 	MetadataExchangeFilterCode: "filename: " + filepath.Join(env.GetBazelBinOrDie(), "extensions/metadata_exchange.compiled.wasm"),
+	// 	StatsFilterCode:            "filename: " + filepath.Join(env.GetBazelBinOrDie(), "extensions/stats.compiled.wasm"),
+	// 	WasmRuntime:                "envoy.wasm.runtime.v8",
+	// },
 }
 
 var TestCases = []struct {
